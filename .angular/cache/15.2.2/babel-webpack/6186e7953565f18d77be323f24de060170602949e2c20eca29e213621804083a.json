{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { combineLatest } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { FormControl } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../../solution3/highlight.pipe\";\nfunction AutofilterDropdownComponent_div_2_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"span\", 5);\n    i0.ɵɵlistener(\"click\", function AutofilterDropdownComponent_div_2_span_1_Template_span_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const entry_r3 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r4.newSelection(entry_r3));\n    });\n    i0.ɵɵpipe(1, \"highlight\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const entry_r3 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"innerHTML\", i0.ɵɵpipeBind2(1, 1, entry_r3.description, ctx_r2.entryControl.value), i0.ɵɵsanitizeHtml);\n  }\n}\nfunction AutofilterDropdownComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3);\n    i0.ɵɵtemplate(1, AutofilterDropdownComponent_div_2_span_1_Template, 2, 4, \"span\", 4);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const entries_r1 = ctx.ngIf;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", entries_r1);\n  }\n}\nexport class AutofilterDropdownComponent {\n  constructor() {\n    this.selectionChange = new EventEmitter();\n    this.entryControl = new FormControl('');\n  }\n  set selection(entry) {\n    if (entry) {\n      this.entryControl.setValue(entry.description);\n    } else {\n      this.entryControl.setValue('');\n    }\n  }\n  ngOnInit() {\n    this.filteredEntries$ = combineLatest([this.entryControl.valueChanges, this.entries$]).pipe(map(([userInput, entries]) => entries.filter(c => c.description.toLowerCase().indexOf(userInput.toLowerCase()) !== -1)));\n  }\n  newSelection(entry) {\n    this.entryControl.setValue(entry.description);\n    this.selectionChange.emit(entry);\n  }\n}\nAutofilterDropdownComponent.ɵfac = function AutofilterDropdownComponent_Factory(t) {\n  return new (t || AutofilterDropdownComponent)();\n};\nAutofilterDropdownComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AutofilterDropdownComponent,\n  selectors: [[\"app-autofilter-dropdown\"]],\n  inputs: {\n    entries$: \"entries$\",\n    placeholder: \"placeholder\",\n    selection: \"selection\"\n  },\n  outputs: {\n    selectionChange: \"selectionChange\"\n  },\n  decls: 4,\n  vars: 5,\n  consts: [[1, \"dropdown\"], [\"type\", \"text\", 1, \"dropbtn\", 3, \"formControl\", \"placeholder\"], [\"class\", \"dropdown-content\", 4, \"ngIf\"], [1, \"dropdown-content\"], [3, \"innerHTML\", \"click\", 4, \"ngFor\", \"ngForOf\"], [3, \"innerHTML\", \"click\"]],\n  template: function AutofilterDropdownComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelement(1, \"input\", 1);\n      i0.ɵɵtemplate(2, AutofilterDropdownComponent_div_2_Template, 2, 1, \"div\", 2);\n      i0.ɵɵpipe(3, \"async\");\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formControl\", ctx.entryControl)(\"placeholder\", ctx.placeholder);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(3, 3, ctx.filteredEntries$));\n    }\n  },\n  dependencies: [i1.NgForOf, i1.NgIf, i2.DefaultValueAccessor, i2.NgControlStatus, i2.FormControlDirective, i1.AsyncPipe, i3.HighlightPipe],\n  styles: [\".dropbtn[_ngcontent-%COMP%] {\\n  padding: 5px;\\n  font-size: 16px;\\n}\\n\\n.dropdown[_ngcontent-%COMP%] {\\n  position: relative;\\n  display: inline-block;\\n}\\n\\n.dropdown-content[_ngcontent-%COMP%] {\\n  display: none;\\n  position: absolute;\\n  min-width: 160px;\\n  box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);\\n  z-index: 1;\\n}\\n\\n.dropdown-content[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\\n  color: black;\\n  padding: 12px 16px;\\n  text-decoration: none;\\n  display: block;\\n  background-color: white;\\n}\\n\\n.dropdown-content[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]:hover {background-color: #f1f1f1}\\n\\n.dropdown[_ngcontent-%COMP%]:hover   .dropdown-content[_ngcontent-%COMP%], .dropbtn[_ngcontent-%COMP%]:focus    + .dropdown-content[_ngcontent-%COMP%]{\\n  display: block;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvc29sdXRpb24vc29sdXRpb241L2F1dG9maWx0ZXItZHJvcGRvd24vYXV0b2ZpbHRlci1kcm9wZG93bi5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsWUFBWTtFQUNaLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIscUJBQXFCO0FBQ3ZCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLGtCQUFrQjtFQUNsQixnQkFBZ0I7RUFDaEIsNENBQTRDO0VBQzVDLFVBQVU7QUFDWjs7QUFFQTtFQUNFLFlBQVk7RUFDWixrQkFBa0I7RUFDbEIscUJBQXFCO0VBQ3JCLGNBQWM7RUFDZCx1QkFBdUI7QUFDekI7O0FBRUEsOEJBQThCLHlCQUF5Qjs7QUFFdkQ7RUFDRSxjQUFjO0FBQ2hCIiwic291cmNlc0NvbnRlbnQiOlsiLmRyb3BidG4ge1xuICBwYWRkaW5nOiA1cHg7XG4gIGZvbnQtc2l6ZTogMTZweDtcbn1cblxuLmRyb3Bkb3duIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG59XG5cbi5kcm9wZG93bi1jb250ZW50IHtcbiAgZGlzcGxheTogbm9uZTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBtaW4td2lkdGg6IDE2MHB4O1xuICBib3gtc2hhZG93OiAwcHggOHB4IDE2cHggMHB4IHJnYmEoMCwwLDAsMC4yKTtcbiAgei1pbmRleDogMTtcbn1cblxuLmRyb3Bkb3duLWNvbnRlbnQgc3BhbiB7XG4gIGNvbG9yOiBibGFjaztcbiAgcGFkZGluZzogMTJweCAxNnB4O1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbn1cblxuLmRyb3Bkb3duLWNvbnRlbnQgc3Bhbjpob3ZlciB7YmFja2dyb3VuZC1jb2xvcjogI2YxZjFmMX1cblxuLmRyb3Bkb3duOmhvdmVyIC5kcm9wZG93bi1jb250ZW50LCAuZHJvcGJ0bjpmb2N1cyArIC5kcm9wZG93bi1jb250ZW50e1xuICBkaXNwbGF5OiBibG9jaztcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"AAAA,SAAmBA,YAAY,QAA8B,eAAe;AAC5E,SAAQC,aAAa,QAAmB,MAAM;AAC9C,SAAQC,GAAG,QAAO,gBAAgB;AAClC,SAAQC,WAAW,QAAO,gBAAgB;;;;;;;;ICCpCC,+BACsE;IADlCA;MAAA;MAAA;MAAA;MAAA,OAASA,4CAAmB;IAAA,EAAC;;IAEjEA,iBAAO;;;;;IADDA,oHAA+D;;;;;IAFzEA,8BAA0E;IACtEA,oFAEO;IACXA,iBAAM;;;;IAHsBA,eAAU;IAAVA,oCAAU;;;ADOxC,OAAM,MAAOC,2BAA2B;EALxCC;IAuBE,oBAAe,GAAG,IAAIN,YAAY,EAAK;IAGvC,iBAAY,GAAG,IAAIG,WAAW,CAAS,EAAE,CAAC;;EAb1C,IACII,SAAS,CAACC,KAAQ;IACpB,IAAIA,KAAK,EAAE;MACT,IAAI,CAACC,YAAY,CAACC,QAAQ,CAACF,KAAK,CAACG,WAAW,CAAC;KAC9C,MAAM;MACL,IAAI,CAACF,YAAY,CAACC,QAAQ,CAAC,EAAE,CAAC;;EAElC;EAQAE,QAAQ;IACN,IAAI,CAACC,gBAAgB,GAAGZ,aAAa,CAAC,CAAC,IAAI,CAACQ,YAAY,CAACK,YAAY,EAAE,IAAI,CAACC,QAAQ,CAAC,CAAC,CAACC,IAAI,CACzFd,GAAG,CAAC,CAAC,CAACe,SAAS,EAAEC,OAAO,CAAC,KAAKA,OAAO,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACT,WAAW,CAACU,WAAW,EAAE,CAACC,OAAO,CAACL,SAAS,CAACI,WAAW,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CACxH;EACH;EAEAE,YAAY,CAACf,KAAQ;IACnB,IAAI,CAACC,YAAY,CAACC,QAAQ,CAACF,KAAK,CAACG,WAAW,CAAC;IAC7C,IAAI,CAACa,eAAe,CAACC,IAAI,CAACjB,KAAK,CAAC;EAClC;;AAhCWH,2BAA2B;mBAA3BA,2BAA2B;AAAA;AAA3BA,2BAA2B;QAA3BA,2BAA2B;EAAAqB;EAAAC;IAAAZ;IAAAa;IAAArB;EAAA;EAAAsB;IAAAL;EAAA;EAAAM;EAAAC;EAAAC;EAAAC;IAAA;MCXxC7B,8BAAsB;MACpBA,2BACoC;MACpCA,4EAIM;;MACRA,iBAAM;;;MAP+BA,eAA4B;MAA5BA,8CAA4B;MAEhCA,eAA+B;MAA/BA,iEAA+B","names":["EventEmitter","combineLatest","map","FormControl","i0","AutofilterDropdownComponent","constructor","selection","entry","entryControl","setValue","description","ngOnInit","filteredEntries$","valueChanges","entries$","pipe","userInput","entries","filter","c","toLowerCase","indexOf","newSelection","selectionChange","emit","selectors","inputs","placeholder","outputs","decls","vars","consts","template"],"sourceRoot":"","sources":["/Users/macbook/Documents/PROJETS/angular-certification/ng-advanced-workshop/src/app/solution/solution5/autofilter-dropdown/autofilter-dropdown.component.ts","/Users/macbook/Documents/PROJETS/angular-certification/ng-advanced-workshop/src/app/solution/solution5/autofilter-dropdown/autofilter-dropdown.component.html"],"sourcesContent":["import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {combineLatest, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {FormControl} from '@angular/forms';\nimport {DropdownOption} from '../types';\n\n@Component({\n  selector: 'app-autofilter-dropdown',\n  templateUrl: './autofilter-dropdown.component.html',\n  styleUrls: ['./autofilter-dropdown.component.css']\n})\nexport class AutofilterDropdownComponent<T extends DropdownOption> implements OnInit {\n\n  @Input()\n  entries$: Observable<T[]>;\n\n  @Input()\n  placeholder: string;\n\n  @Input()\n  set selection(entry: T) {\n    if (entry) {\n      this.entryControl.setValue(entry.description);\n    } else {\n      this.entryControl.setValue('');\n    }\n  }\n\n  @Output()\n  selectionChange = new EventEmitter<T>();\n\n  filteredEntries$: Observable<T[]>;\n  entryControl = new FormControl<string>('');\n\n  ngOnInit() {\n    this.filteredEntries$ = combineLatest([this.entryControl.valueChanges, this.entries$]).pipe(\n      map(([userInput, entries]) => entries.filter(c => c.description.toLowerCase().indexOf(userInput.toLowerCase()) !== -1))\n    );\n  }\n\n  newSelection(entry: T) {\n    this.entryControl.setValue(entry.description);\n    this.selectionChange.emit(entry);\n  }\n}\n","<div class=\"dropdown\">\n  <input type=\"text\" class=\"dropbtn\" [formControl]=\"entryControl\"\n         [placeholder]=\"placeholder\" >\n  <div class=\"dropdown-content\" *ngIf=\"filteredEntries$ | async as entries\">\n      <span *ngFor=\"let entry of entries\" (click)=\"newSelection(entry)\"\n            [innerHTML]=\"entry.description | highlight: entryControl.value\">\n      </span>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}