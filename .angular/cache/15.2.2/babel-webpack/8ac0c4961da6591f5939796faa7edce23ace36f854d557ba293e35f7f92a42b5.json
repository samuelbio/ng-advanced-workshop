{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CountryService {\n  constructor(http) {\n    this.http = http;\n    this.countries$ = http.get('http://localhost:3000/countries');\n  }\n  getCountries() {\n    return this.countries$;\n  }\n  getStatesFor(countryId) {\n    return this.http.get(`http://localhost:3000/states?countryCode=${countryId}`).pipe(map(states => states.sort((a, b) => a.description > b.description ? 1 : -1)));\n  }\n}\nCountryService.ɵfac = function CountryService_Factory(t) {\n  return new (t || CountryService)(i0.ɵɵinject(i1.HttpClient));\n};\nCountryService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CountryService,\n  factory: CountryService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAIA,SAAQA,GAAG,QAAO,gBAAgB;;;AAKlC,OAAM,MAAOC,cAAc;EAIzBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IACtB,IAAI,CAACC,UAAU,GAAGD,IAAI,CAACE,GAAG,CAAY,iCAAiC,CAAC;EAC1E;EAEAC,YAAY;IACV,OAAO,IAAI,CAACF,UAAU;EACxB;EAEAG,YAAY,CAACC,SAAiB;IAC5B,OAAO,IAAI,CAACL,IAAI,CAACE,GAAG,CAAU,4CAA4CG,SAAS,EAAE,CAAC,CACnFC,IAAI,CACHT,GAAG,CAACU,MAAM,IAAIA,MAAM,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAMD,CAAC,CAACE,WAAW,GAAGD,CAAC,CAACC,WAAW,GAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAC/E;EACL;;AAjBWb,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAc,SAAdd,cAAc;EAAAe,YAFb;AAAM","names":["map","CountryService","constructor","http","countries$","get","getCountries","getStatesFor","countryId","pipe","states","sort","a","b","description","factory","providedIn"],"sourceRoot":"","sources":["/Users/macbook/Documents/PROJETS/angular-certification/ng-advanced-workshop/src/app/exercise3/country.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {Country, State} from './types';\nimport {map} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CountryService {\n\n  private countries$: Observable<Country[]>;\n\n  constructor(private http: HttpClient) {\n    this.countries$ = http.get<Country[]>('http://localhost:3000/countries');\n  }\n\n  getCountries(): Observable<Country[]> {\n    return this.countries$;\n  }\n\n  getStatesFor(countryId: string): Observable<State[]> {\n    return this.http.get<State[]>(`http://localhost:3000/states?countryCode=${countryId}`)\n      .pipe(\n        map(states => states.sort((a, b) => (a.description > b.description) ? 1 : -1))\n      );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}