{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class StateButtonDirective {\n  constructor() {\n    this.textWhenWorking = 'Loading...';\n    this.textWhenDone = 'Done!';\n    this.buttonText = 'Save';\n  }\n  triggerAction() {\n    this.buttonText = this.textWhenWorking;\n    this.action.subscribe(() => this.buttonText = this.textWhenDone);\n  }\n}\nStateButtonDirective.ɵfac = function StateButtonDirective_Factory(t) {\n  return new (t || StateButtonDirective)();\n};\nStateButtonDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n  type: StateButtonDirective,\n  selectors: [[\"\", \"action\", \"\", \"textWhenDone\", \"\"]],\n  hostVars: 1,\n  hostBindings: function StateButtonDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function StateButtonDirective_click_HostBindingHandler() {\n        return ctx.triggerAction();\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"textContent\", ctx.buttonText);\n    }\n  },\n  inputs: {\n    action: \"action\",\n    textWhenWorking: \"textWhenWorking\",\n    textWhenDone: \"textWhenDone\",\n    buttonText: [\"defaultText\", \"buttonText\"]\n  }\n});","map":{"version":3,"mappings":";AAMA,OAAM,MAAOA,oBAAoB;EAHjCC;IASE,oBAAe,GAAG,YAAY;IAG9B,iBAAY,GAAG,OAAO;IAItB,eAAU,GAAG,MAAM;;EAGnBC,aAAa;IACX,IAAI,CAACC,UAAU,GAAG,IAAI,CAACC,eAAe;IACtC,IAAI,CAACC,MAAM,CAACC,SAAS,CAAC,MAAM,IAAI,CAACH,UAAU,GAAG,IAAI,CAACI,YAAY,CAAC;EAClE;;AAnBWP,oBAAoB;mBAApBA,oBAAoB;AAAA;AAApBA,oBAAoB;QAApBA,oBAAoB;EAAAQ;EAAAC;EAAAC;IAAA;;eAApBC,mBAAe;MAAA","names":["StateButtonDirective","constructor","triggerAction","buttonText","textWhenWorking","action","subscribe","textWhenDone","selectors","hostVars","hostBindings","ctx"],"sourceRoot":"","sources":["/Users/macbook/Documents/PROJETS/angular-certification/ng-advanced-workshop/src/app/solution/solution6/state-button.directive.ts"],"sourcesContent":["import {Directive, HostBinding, HostListener, Input} from '@angular/core';\nimport {Observable} from 'rxjs';\n\n@Directive({\n  selector: '[action][textWhenDone]'\n})\nexport class StateButtonDirective<T> {\n\n  @Input()\n  action: Observable<T>;\n\n  @Input()\n  textWhenWorking = 'Loading...';\n\n  @Input()\n  textWhenDone = 'Done!';\n\n  @Input('defaultText')\n  @HostBinding('textContent')\n  buttonText = 'Save';\n\n  @HostListener('click')\n  triggerAction() {\n    this.buttonText = this.textWhenWorking;\n    this.action.subscribe(() => this.buttonText = this.textWhenDone);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}