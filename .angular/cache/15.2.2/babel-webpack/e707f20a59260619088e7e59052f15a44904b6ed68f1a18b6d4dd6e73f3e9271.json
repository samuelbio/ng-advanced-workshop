{"ast":null,"code":"import { FormControl } from '@angular/forms';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./country.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"./highlight.pipe\";\nfunction Solution3Component_div_7_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"span\", 6);\n    i0.ɵɵlistener(\"click\", function Solution3Component_div_7_span_1_Template_span_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const country_r4 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r5.updateStates(country_r4));\n    });\n    i0.ɵɵpipe(1, \"highlight\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const country_r4 = ctx.$implicit;\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"innerHTML\", i0.ɵɵpipeBind2(1, 1, country_r4.description, ctx_r3.countryControl.value), i0.ɵɵsanitizeHtml);\n  }\n}\nfunction Solution3Component_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵtemplate(1, Solution3Component_div_7_span_1_Template, 2, 4, \"span\", 5);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const countries_r2 = ctx.ngIf;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", countries_r2);\n  }\n}\nfunction Solution3Component_div_9_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"span\", 9);\n    i0.ɵɵlistener(\"click\", function Solution3Component_div_9_span_4_Template_span_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const s_r9 = restoredCtx.$implicit;\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r10.state = s_r9);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"titlecase\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const s_r9 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, s_r9.description));\n  }\n}\nfunction Solution3Component_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\", 0);\n    i0.ɵɵelement(2, \"input\", 7);\n    i0.ɵɵelementStart(3, \"div\", 4);\n    i0.ɵɵtemplate(4, Solution3Component_div_9_span_4_Template, 3, 3, \"span\", 8);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const states_r7 = ctx.ngIf;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"value\", ctx_r1.state == null ? null : ctx_r1.state.description)(\"disabled\", states_r7.length == 0);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", states_r7);\n  }\n}\nexport class Solution3Component {\n  constructor(service) {\n    this.service = service;\n    this.countryControl = new FormControl('');\n    this.countries$ = this.countryControl.valueChanges.pipe(withLatestFrom(this.service.getCountries()), map(([userInput, countries]) => countries.filter(c => c.description.toLowerCase().indexOf(userInput.toLowerCase()) !== -1)));\n  }\n  updateStates(country) {\n    this.countryControl.setValue(country.description);\n    this.states$ = this.service.getStatesFor(country.id);\n  }\n}\nSolution3Component.ɵfac = function Solution3Component_Factory(t) {\n  return new (t || Solution3Component)(i0.ɵɵdirectiveInject(i1.CountryService));\n};\nSolution3Component.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: Solution3Component,\n  selectors: [[\"app-solution3\"]],\n  decls: 11,\n  vars: 7,\n  consts: [[1, \"dropdown\"], [\"type\", \"text\", \"placeholder\", \"Enter country name\", 1, \"dropbtn\", 3, \"formControl\"], [\"class\", \"dropdown-content\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"dropdown-content\"], [3, \"innerHTML\", \"click\", 4, \"ngFor\", \"ngForOf\"], [3, \"innerHTML\", \"click\"], [\"type\", \"text\", \"placeholder\", \"Enter your state\", 1, \"dropbtn\", 3, \"value\", \"disabled\"], [3, \"click\", 4, \"ngFor\", \"ngForOf\"], [3, \"click\"]],\n  template: function Solution3Component_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h2\");\n      i0.ɵɵtext(1, \"Solution 3\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"h2\");\n      i0.ɵɵtext(3, \"Result\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\")(5, \"div\", 0);\n      i0.ɵɵelement(6, \"input\", 1);\n      i0.ɵɵtemplate(7, Solution3Component_div_7_Template, 2, 1, \"div\", 2);\n      i0.ɵɵpipe(8, \"async\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(9, Solution3Component_div_9_Template, 5, 3, \"div\", 3);\n      i0.ɵɵpipe(10, \"async\");\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"formControl\", ctx.countryControl);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(8, 3, ctx.countries$));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(10, 5, ctx.states$));\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i3.DefaultValueAccessor, i3.NgControlStatus, i3.FormControlDirective, i2.AsyncPipe, i2.TitleCasePipe, i4.HighlightPipe],\n  styles: [\".dropbtn[_ngcontent-%COMP%] {\\n  padding: 5px;\\n  font-size: 16px;\\n}\\n\\n.dropdown[_ngcontent-%COMP%] {\\n  position: relative;\\n  display: inline-block;\\n}\\n\\n.dropdown-content[_ngcontent-%COMP%] {\\n  display: none;\\n  position: absolute;\\n  min-width: 160px;\\n  box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);\\n  z-index: 1;\\n}\\n\\n.dropdown-content[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\\n  color: black;\\n  padding: 12px 16px;\\n  text-decoration: none;\\n  display: block;\\n  background-color: white;\\n}\\n\\n.dropdown-content[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]:hover {background-color: #f1f1f1}\\n\\n.dropdown[_ngcontent-%COMP%]:hover   .dropdown-content[_ngcontent-%COMP%], .dropbtn[_ngcontent-%COMP%]:focus    + .dropdown-content[_ngcontent-%COMP%]{\\n  display: block;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvc29sdXRpb24vc29sdXRpb24zL3NvbHV0aW9uMy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsWUFBWTtFQUNaLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIscUJBQXFCO0FBQ3ZCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLGtCQUFrQjtFQUNsQixnQkFBZ0I7RUFDaEIsNENBQTRDO0VBQzVDLFVBQVU7QUFDWjs7QUFFQTtFQUNFLFlBQVk7RUFDWixrQkFBa0I7RUFDbEIscUJBQXFCO0VBQ3JCLGNBQWM7RUFDZCx1QkFBdUI7QUFDekI7O0FBRUEsOEJBQThCLHlCQUF5Qjs7QUFFdkQ7RUFDRSxjQUFjO0FBQ2hCIiwic291cmNlc0NvbnRlbnQiOlsiLmRyb3BidG4ge1xuICBwYWRkaW5nOiA1cHg7XG4gIGZvbnQtc2l6ZTogMTZweDtcbn1cblxuLmRyb3Bkb3duIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG59XG5cbi5kcm9wZG93bi1jb250ZW50IHtcbiAgZGlzcGxheTogbm9uZTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBtaW4td2lkdGg6IDE2MHB4O1xuICBib3gtc2hhZG93OiAwcHggOHB4IDE2cHggMHB4IHJnYmEoMCwwLDAsMC4yKTtcbiAgei1pbmRleDogMTtcbn1cblxuLmRyb3Bkb3duLWNvbnRlbnQgc3BhbiB7XG4gIGNvbG9yOiBibGFjaztcbiAgcGFkZGluZzogMTJweCAxNnB4O1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbn1cblxuLmRyb3Bkb3duLWNvbnRlbnQgc3Bhbjpob3ZlciB7YmFja2dyb3VuZC1jb2xvcjogI2YxZjFmMX1cblxuLmRyb3Bkb3duOmhvdmVyIC5kcm9wZG93bi1jb250ZW50LCAuZHJvcGJ0bjpmb2N1cyArIC5kcm9wZG93bi1jb250ZW50e1xuICBkaXNwbGF5OiBibG9jaztcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"AAIA,SAAQA,WAAW,QAAO,gBAAgB;AAC1C,SAAQC,GAAG,EAAEC,cAAc,QAAO,gBAAgB;;;;;;;;;ICE5CC,+BAC0E;IADlCA;MAAA;MAAA;MAAA;MAAA,OAASA,8CAAqB;IAAA,EAAC;;IAEvEA,iBAAO;;;;;IADDA,wHAAmE;;;;;IAF3EA,8BAAsE;IACpEA,2EAEO;IACTA,iBAAM;;;;IAHsBA,eAAY;IAAZA,sCAAY;;;;;;IAUtCA,+BAAmD;IAApBA;MAAA;MAAA;MAAA;MAAA;IAAA,EAAmB;IAACA,YAA6B;;IAAAA,iBAAO;;;;IAApCA,eAA6B;IAA7BA,4DAA6B;;;;;IAJtFA,2BAAuC;IAEnCA,2BAA+H;IAC/HA,8BAA8B;IAC5BA,2EAAuF;IACzFA,iBAAM;;;;;IAH6BA,eAA4B;IAA5BA,8EAA4B;IAEzCA,eAAS;IAATA,mCAAS;;;ADLnC,OAAM,MAAOC,kBAAkB;EAO7BC,YAAoBC,OAAuB;IAAvB,YAAO,GAAPA,OAAO;IAF3B,mBAAc,GAAG,IAAIN,WAAW,CAAS,EAAE,CAAC;IAG1C,IAAI,CAACO,UAAU,GAAG,IAAI,CAACC,cAAc,CAACC,YAAY,CAACC,IAAI,CACrDR,cAAc,CAAC,IAAI,CAACI,OAAO,CAACK,YAAY,EAAE,CAAC,EAC3CV,GAAG,CAAC,CAAC,CAACW,SAAS,EAAEC,SAAS,CAAC,KAAKA,SAAS,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,WAAW,CAACC,WAAW,EAAE,CAACC,OAAO,CAACN,SAAS,CAACK,WAAW,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAC5H;EACH;EAEAE,YAAY,CAACC,OAAgB;IAC3B,IAAI,CAACZ,cAAc,CAACa,QAAQ,CAACD,OAAO,CAACJ,WAAW,CAAC;IACjD,IAAI,CAACM,OAAO,GAAG,IAAI,CAAChB,OAAO,CAACiB,YAAY,CAACH,OAAO,CAACI,EAAE,CAAC;EACtD;;AAjBWpB,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;QAAlBA,kBAAkB;EAAAqB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCZ/B1B,0BAAI;MAAAA,0BAAU;MAAAA,iBAAK;MACnBA,0BAAI;MAAAA,sBAAM;MAAAA,iBAAK;MACfA,2BAAM;MAEFA,2BACyC;MACzCA,mEAIM;;MACRA,iBAAM;MAERA,mEAOM;;;;MAhBiCA,eAA8B;MAA9BA,gDAA8B;MAElCA,eAAyB;MAAzBA,2DAAyB;MAOtDA,eAAsB;MAAtBA,yDAAsB","names":["FormControl","map","withLatestFrom","i0","Solution3Component","constructor","service","countries$","countryControl","valueChanges","pipe","getCountries","userInput","countries","filter","c","description","toLowerCase","indexOf","updateStates","country","setValue","states$","getStatesFor","id","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["/Users/macbook/Documents/PROJETS/angular-certification/ng-advanced-workshop/src/app/solution/solution3/solution3.component.ts","/Users/macbook/Documents/PROJETS/angular-certification/ng-advanced-workshop/src/app/solution/solution3/solution3.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {Country, State} from './types';\nimport {CountryService} from './country.service';\nimport {FormControl} from '@angular/forms';\nimport {map, withLatestFrom} from 'rxjs/operators';\n\n@Component({\n  selector: 'app-solution3',\n  templateUrl: './solution3.component.html',\n  styleUrls: ['./solution3.component.css']\n})\nexport class Solution3Component {\n\n  countries$: Observable<Country[]>;\n  states$: Observable<State[]>;\n  state: State;\n  countryControl = new FormControl<string>('');\n\n  constructor(private service: CountryService) {\n    this.countries$ = this.countryControl.valueChanges.pipe(\n      withLatestFrom(this.service.getCountries()),\n      map(([userInput, countries]) => countries.filter(c => c.description.toLowerCase().indexOf(userInput.toLowerCase()) !== -1))\n    );\n  }\n\n  updateStates(country: Country) {\n    this.countryControl.setValue(country.description);\n    this.states$ = this.service.getStatesFor(country.id);\n  }\n}\n","<h2>Solution 3</h2>\n<h2>Result</h2>\n<div >\n  <div class=\"dropdown\">\n    <input type=\"text\" class=\"dropbtn\" [formControl]=\"countryControl\"\n           placeholder=\"Enter country name\" >\n    <div class=\"dropdown-content\" *ngIf=\"countries$ | async as countries\">\n      <span *ngFor=\"let country of countries\" (click)=\"updateStates(country)\"\n            [innerHTML]=\"country.description | highlight: countryControl.value\">\n      </span>\n    </div>\n  </div>\n</div>\n<div *ngIf=\"states$ | async as states\">\n  <div class=\"dropdown\">\n    <input type=\"text\" class=\"dropbtn\" [value]=\"state?.description\" [disabled]=\"states.length == 0\" placeholder=\"Enter your state\">\n    <div class=\"dropdown-content\">\n      <span *ngFor=\"let s of states\" (click)=\"state = s\">{{s.description | titlecase}}</span>\n    </div>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}